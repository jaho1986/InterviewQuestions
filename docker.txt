Download an image in docker:
docker pull [OPTIONS] NAME[:TAG]

Run an image:
docker run -p {hostPort}:{containerPort} -d NAME:TAG

Get Logs:
docker logs -f CONTAINERID

Get Logs tail :
docker logs -f CONTAINERID

List running conatiners:
docker conatainer ls 

List running conatiners with status:
docker conatainer ls -a

Stop Container:
docker container stop CONTAINERID

Tag images:
docker tag NAME[:TAG] NAME[:NEWTAGNAME]

Search an image:
docker search NAME

See image history:
docker image history CONTAINERID

Pause a container:
docker container pause CONTAINERID

Unpause a container:
docker container unpause CONTAINERID

Inspect a container:
docker container inspect CONTAINERID

Remove stoped containers:
docker container prune

Kill execution of a running container:
docker container kill CONTAINERID

Run an application when docker desktop starts:
docker run -p {hostPort}:{containerPort} -d --restart=always NAME:TAG

Get docker events log:
docker events

Top process running on an specific container:
docker top CONTAINERID

Get metrics of a container
docker stats

Specify maximum memory to a container and CPU (% x 1000):
docker run -p {hostPort}:{containerPort} -m 512m --cpu-quota 5000 -d NAME:TAG

Get resources managed by image:
docker system df

Push container to repository:
docker login
{userid} {password}
docker push NAME:TAG

Process to upload a SringBoot App:
mvn clean install
docker push NAME:TAG

Run an application linked to another container:
docker run -p {hostPort}:{containerPort} --link=mysql --env RDS_HOSTNAME=mysql  NAME:TAG

Run an application using docker compose:
docker-compose up

Copy any element into a container:
docker container cp {nameOfElementToBeCopied} {nameOfContainer}:/{path}
docker container exec {nameOfContainer}  ls /{directory}

Execute a JAR into a container (creating an image manually):
docker container commit {nameOfContainer} {nameOfTheJAR}:{tagName}
docker commit --change='CMD ["java","-jar","{path}/{nameOfTheJAR}.jar"]' {containerNameInWichIsStored}/nameOfTheJAR}:{tagName}
docker run -p {hostPort}:{containerPort} {nameOfTheJAR}:{tagName}

Build an image from Dockerfile:
docker build -t {nameOfRepository}/{nameOfTheImage}:{nameOfTheTag} .

A better alternative to --link is to launch both the applications into a custom docker network.
Here are the commands you can use:
docker network ls
docker network create web-application-mysql-network
docker inspect web-application-mysql-network
docker run --detach --env MYSQL_ROOT_PASSWORD=dummypassword --env MYSQL_USER=todos-user --env MYSQL_PASSWORD=dummytodos --env MYSQL_DATABASE=todos --name mysql --publish 3306:3306 mysql:5.7
docker run --detach --env MYSQL_ROOT_PASSWORD=dummypassword --env MYSQL_USER=todos-user --env MYSQL_PASSWORD=dummytodos --env MYSQL_DATABASE=todos --name mysql --publish 3306:3306 --network=web-application-mysql-network mysql:5.7
docker inspect web-application-mysql-network

Build a Docker image from a simple springboot app:
 - Build a Jar.
 - Setup the prerequisites for running the jar (- openjdk:8-jdk-alpine)
 - Copy the jar
 - Run the JAR
