Object oriented programming.
Is ma methodology or paradigm to design a program using Classes and Objects

Object 
Is a real world entity that has teir own properties an behaviours.

Class
Blueprint from wich objects properties a behaviours are decided.

Polymorphism:
Concept in wich a single action can be done in different ways.

Static Polymorphism:
Is the one that is resolved in compile time. Method overloading is an example of compile time polymorphism.

Dynamic Polymorphism:
Dynamic porlymorphism is a process in wich a call to an overridden methos is resolved at runtime. That's why it is called runtime polymorphism.

Advantages:
 - Support method overriding
 - Common method specification.

Example:
Cass A has a method move()
Cass B has a method move()
You create instances of the to classes and you call the method move of each class.

Characteristics of Polymorphism:
 - Operator overloading. (Operator + sum, or concatenate).
 - Polimorphic paarameters. (When you have local variables with the same name as the instance variables).
 
Super Keyword:
Super is a keyword. It is used inside a sub-class mehotd definition to call a  method in the superclass.

Why do we need inheritance?
 - To reduce code redundancy.
 - To improve the readability.
 
What is inheritance?
Is pa procedure, in wich a sub class inherits all the properties and behaviours of a super class.

Which types of inheritance ares supported in Java:
 - Single inheritance.
 - Multi-level inheritance.
 - Hierarchical inheritance.
 - Hybrid inheritance.
 
Single inheritance:
Is a process where a subclass inherits all properties and behaviour of a single super class.

Multi-level inheritance:
Is a process where a subclass inherits all the properties and behaviours of more than one super class at multiple levels.

Hierarchical inheritance:
Is a process where one or more subclasses inherits all the properties and beaviours of one super class.

Hybrid inheritance:
Is a combination of one or more inheritances.

Overloading:
Is a feature that allows a class to have more than one method having the same name, if their argument list are different.

Three types of method overloading:
 - Number of parameters.
 - Data types of the parameters.
 - Sequence of the data type of the parameters.

Overriding:
Is a feature that allows the parent class and the subclass to have a same method.

Rules of method overriding:
 - The argument list of the child should match the parent class.
 - Access modifier of the child class should be less restrictive than the parent class.
 - Local parameters cannot be overridden.
 
SOLID design principles:
Are the design principles that enable us manage most ot the software design problems. The termn SOLID is an acronym for five design principles intended to make software designs more understandable, fexible and maintainable.

 - S: Single responsablility principle.
 - O: Open closed principle.
 - L: Liskov substitution principle.
 - I: Interface segregation principle.
 - D: Dependency Inversion Principle.

Single responsablility principle:
Every module or class should have responsability over a single part of the functionality provided by the software, and that responsability should be entirely encapsulated by the class.

Open closed principle:
Software entities should be open for extension, but closed for modification.

Liskov substitution principle:
Objects in a program should be replaceable with instances of their subtypes without altering the correctness of that program.

Interface segregation principle:
Many client-specific interfaces are better than one general-purpose interface. 
We should not enforce clients to implement interfaces that they don't use. Instead of creating a big interface we can break down it to smaller interfaces.

Dependency Inversion Principle:
One "should depend on abstractions, not concretions".
Abstractions should not depend on the details whereas the details should depend on abstractions.
High-level modules should not depend on low level modules.
It's used to create loosely coupled software modules. Modules should depend on abstraction by the use of interfaces instead of creating new objects inside a class.

Features of SOLID principles:
 - Achieve reduction in complexity of code.
 - Increases readability, extensibility and maintenance.
 - Reduce error and implement reusability.
 - Achieve better testability.
 - Reduce tight coupling.
 
Solution to develop a successful application:
 - Architecture: Choosing an architecture is the first step in designing application based on the requirements (MVC, WebAPI, etc).
 - Design principles.
 - Design patterns.
 
Generics in Java:
Is a term that denotes a set of language features relatet to the definition and use of Generic types and methods.

Types of generics:
 - Generic Type Class.
 - Generic Type Interface.
 - Generic Type Method.
 - Generic Type Constructor.
 
Generic functions:
We can also write generic functions that can be called with different types of arguments based of the type of aguments passed to the generic method and further the compiles handles this method.

Advantages of Generics in Java:
 - Code reusability.
 - Type safety.
 - Individual type casting not required.
 - Implementing non generic algorithms.
 
Collections in Java

Arraylist:
 - Is the implementation if List Interface.
 - Array is size fixed, but Arraylist size can grow dynamically.
 - ArrayList is used to store objects and perform operations on it.
 - ArrayList is not Syncronized. Vector is similar to ArrayList wich is synchronized.
 - If your applications does not require insertion or deletion of elements, the most efficient dasta structure is the array.
 
 How to create elements of arraylist?
  - For each loop.
  - Iterator.
  - List Iterator.
  - Enumeration.
  
 Vector:
 Vector is same as ArrayList. The only difference is that, Vector is syncronized but ArrayList is not. That means Vector is threadsafe.
 
 Queue:
  - Is an interface.
  - PriorityQueue is a class wich implements Queue iterface an sorts the data stored. DeQue satands for double ended queue.
  - The Queue can be operated at both ends. Same holds for insertion and deletion too.
  - Queue operates on the principle "First In First Out". 
 
 
